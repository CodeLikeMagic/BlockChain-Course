Trust us not only about executing regular operations correctly but also about managing exception satisfactory. Robustness is the ability to satisfactorily manage exceptional situations. It's all the more important in a decentralized autonomous network such as a blockchain where there are no intermediaries minding the store. This lesson is about some of the exceptions that may occur during the blockchaining process. We'll discuss just two exceptions in this lesson and more in future courses of the specialization. Have you wondered, what if more than one miner solves the consensus puzzle where it close in time to each other? What if more than one transaction references as input the same digital asset? This situation is called double spending. Handling such exception satisfactorily is critical for ensuring the security of the blockchain. We start with the securechain indicated by three blocks and we want to add to this chain. Here, you see two miners have solved the consensus puzzle very close to each other. Bitcoin protocol allows this chain split or two chains for the next cycle. One led by each of the competing blocks. The probability that the next block will happen at the same time in both these chains is extremely low. So the winner of the next cycle for block creation consolidates one of the chains and that chain becomes the accepted chain. In this case, the newest block is added to the main chain. Now this chain is the longest and the valid main chain. The transaction in the other blocks are returned to the unconfirmed pool. Summarizing with a very low probability, the main chain may split but if it does, the bitcoin protocol has methods to consolidate it to a single chain within a cycle. Etherium handles more than one person we know by allowing Omar or Runner-Up blocks and allocating a small incentive for these Runner-Up blocks. This incentive model helps in keeping the chains secure. New blocks are added only to the mainchain and not to the Runner-Up chains. That are Runner-up blocks are maintained for six more blocks after they were added. Here you see a blockchain with two blocks one at the height, 4567, another one at a height, 4557. The one deeper inside the chain is more trustworthy than the one newly added. Let's now add us the double spending problem. There's a possibility that digital currency and other consumables are single used digital assets, can be intentionally or inadvertently reused in transactions. Analogy time, using our airport flying analogy in lesson one, this is like an airline double booking a seat on a flight. In this case, a gate crew solved this problem by using Ad hoc methods such as asking for volunteers to relinquish their seats for money, etc. In a decentralized network, like a blockchain, there is no intermediary. We need a policy and an automatic deterministic way to handle this situation. A policy for handling transaction and double spending in Bitcoin is to allow the first transaction that reference the digital asset and reject the rest of the transaction that reference the same digital asset. In Ethereum, a combination of account number and a global nonce is used to address the doublet spending issue. Every time a transaction is initiated by an account, a global nonce is included in the transaction. After that, the nonce is incremented. Time stamp on the nonce in the transaction should be unique and verified to prevent any double use of digital asset. Summarizing, well-defined processes for handling exception improve trust in the blockchain. There are many other issues such as difficulty adjustment and hard and soft fork exception that will be discussed in the next lessons in the courses that follow.